substitutions:
  device_name: "temp-1w8-pro"
  friendly_name: "temp-1w8-pro"
  project_name: "makerspacelt.temp-1w8-pro"
  version: "v4.0"

esphome:
  name: "${device_name}"
  friendly_name: "$friendly_name"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: dev

esp32:
  board: esp32-c3-devkitm-1

api:

captive_portal:

logger:

http_request:
  verify_ssl: false

ota:
  platform: http_request

wifi:
    ap: {}

dashboard_import:
  package_import_url: github://makerspacelt/temp-1w8-pro/esphome/temp-1w8-pro.yaml@master
  import_full_config: true

improv_serial:

mdns:

globals:
  - {id: _nan_counter, type: int, restore_value: no, initial_value: '0'}

i2c:
  sda: 8 
  scl: 9
  frequency: 400kHz
  id: i2c_bus

font:
  - file:
      type: gfonts
      family: Roboto
    id: font1
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: disp
    rotation: 0
    external_vcc: false
    update_interval: 0.1s
    lambda: |-
      it.rectangle(0, 0, 128, 64);
      it.printf(2, -4, id(font1), "%.2f", (float)(id(T1).state));
      it.printf(2, 12, id(font1), "%.2f", (float)(id(T2).state));
      it.printf(2, 28, id(font1), "%.2f", (float)(id(T3).state));
      it.printf(2, 44, id(font1), "%.2f", (float)(id(T4).state));
      it.printf(66, -4, id(font1), "%.2f", (float)(id(T5).state));
      it.printf(66, 12, id(font1), "%.2f", (float)(id(T6).state));
      it.printf(66, 28, id(font1), "%.2f", (float)(id(T7).state));
      it.printf(66, 44, id(font1), "%.2f", (float)(id(T8).state));

one_wire:
  - {platform: gpio, id: w1, pin: 4}
  - {platform: gpio, id: w2, pin: 3}
  - {platform: gpio, id: w3, pin: 1}
  - {platform: gpio, id: w4, pin: 0}
  - {platform: gpio, id: w5, pin: 5}
  - {platform: gpio, id: w6, pin: 6}
  - {platform: gpio, id: w7, pin: 7}
  - {platform: gpio, id: w8, pin: 10}

sensor:
  - platform: dallas_temp
    id: T1
    one_wire_id: w1
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

  - platform: dallas_temp
    id: T2
    one_wire_id: w2
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

  - platform: dallas_temp
    id: T3
    one_wire_id: w3
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

  - platform: dallas_temp
    id: T4
    one_wire_id: w4
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

  - platform: dallas_temp
    id: T5
    one_wire_id: w5
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

  - platform: dallas_temp
    id: T6
    one_wire_id: w6
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

  - platform: dallas_temp
    id: T7
    one_wire_id: w7
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

  - platform: dallas_temp
    id: T8
    one_wire_id: w8
    update_interval: 2s
    accuracy_decimals: 3
    filters:
      - filter_out: 85.0
      - lambda: if (isnan(x)) {id(_got_nan).execute();}; return x;

# Pin/switch for ds18b20 power-cycle. Used when "nan" values are received from sensor.
# We observed that in rare cases some sensors (randomly) are lost by one-wire resulting in "nan" values.
# To overcome this, device reboots sensors if "nan" values are detected.
switch:
  - platform: gpio
    id: sw_1w_pwr
    pin: GPIO20
    restore_mode: ALWAYS_ON


# Customize functions of buttons based on your own needs.
binary_sensor:
  # Now btn1 and btn2 now just reboot the sensors.
  - platform: gpio
    id: btn1
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
    on_press:
      - switch.toggle: sw_1w_pwr
  - platform: gpio
    id: btn2
    pin:
      number: GPIO21
      mode: INPUT_PULLUP
    on_press:
      then:
        - ota.http_request.flash:
            url: https://temp-1w8-pro.makerspace.lt/firmware.bin
            md5_url: https://temp-1w8-pro.makerspace.lt/firmware.md5

# Script that monitors for "nan" values and reboots the sensors.
script:
  - id: _got_nan
    mode: single
    then:
      - lambda: id(_nan_counter)+=1;
      - if:
          condition:
            lambda: return (id(_nan_counter) > 10);
          then:
            - logger.log: "_got_nan Reseting 1w bus power"
            - switch.turn_off: sw_1w_pwr
            - delay: 2s
            - switch.turn_on: sw_1w_pwr
            - delay: 1s
            - lambda: id(_nan_counter)=0;


